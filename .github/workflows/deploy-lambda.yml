name: Deploy Lambda

on:
  push:
    branches: [ main ]
    paths:
      - 'src/lambda/**'  # Only trigger on Lambda code changes
      - 'requirements.txt'  # Also trigger on requirements changes
      - 'src/lambda/requirements.txt'  # Also trigger on requirements changes (duplicated)
      - 'terraform/**'  # Also trigger on Terraform changes

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.12'

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: '1.5.0'

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
        # Allow access to us-east-2 for S3 backend
        role-duration-seconds: 1200
        role-skip-session-tagging: true
        mask-aws-account-id: true

    # Add credentials for us-east-2 region for S3 backend
    - name: Configure AWS credentials for Terraform backend
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-2
        role-duration-seconds: 1200
        role-skip-session-tagging: true
        mask-aws-account-id: true

    - name: Install dependencies
      run: |
        pip install -r requirements.txt --target ./src/lambda
        cd src/lambda
        rm -rf *.dist-info __pycache__

    - name: Create deployment package
      run: |
        cd src/lambda
        zip -r ../../terraform/lambda_function.zip ./*

    - name: Initialize Terraform
      run: |
        cd terraform
        terraform init

    - name: Check Terraform Plan
      id: plan
      run: |
        cd terraform
        # Capture the plan output
        terraform plan -detailed-exitcode 2>&1 | tee plan.txt
      continue-on-error: true

    - name: Check for drift
      run: |
        cd terraform
        if [ -f plan.txt ]; then
          if grep -q "No changes." plan.txt; then
            echo "No changes detected in Terraform plan"
            exit 0
          else
            echo "Configuration drift detected! Terraform plan shows changes that need to be reviewed."
            echo "Please review the plan output above and make necessary adjustments."
            cat plan.txt
            exit 1
          fi
        else
          echo "Plan file not found"
          exit 1
        fi

    - name: Update Lambda function
      if: success()
      run: |
        aws lambda update-function-code \
          --function-name trading-prod-function \
          --zip-file fileb://terraform/lambda_function.zip