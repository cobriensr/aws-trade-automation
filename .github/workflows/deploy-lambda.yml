name: Deploy Lambda

on:
  push:
    branches: [ main ]
    paths:
      - 'src/lambda/**'
      - 'requirements.txt'
      - 'src/lambda/requirements.txt'
      - 'terraform/**'
  workflow_dispatch:

permissions:
  id-token: write
  contents: read
  issues: write

jobs:
  build-and-check:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.12'

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: '1.7.0'

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
        role-duration-seconds: 1200
        role-skip-session-tagging: true
        mask-aws-account-id: true

    - name: Install dependencies and create Lambda package
      run: |
        pip install --no-cache-dir --only-binary :all: -r requirements.txt --target ./src/lambda
        cd src/lambda
        find . -type d -name "tests" -exec rm -rf {} +
        find . -type d -name "docs" -exec rm -rf {} +
        find . -name "*.pyc" -delete
        find . -name "*.pyo" -delete
        rm -rf *.dist-info __pycache__
        zip -r ../../terraform/lambda_function.zip ./*
        aws s3 cp ../../terraform/lambda_function.zip s3://trading-lambda-deployment/lambda_function.zip

    - name: Setup Terraform Plugin Cache
      run: |
        mkdir -p ~/.terraform.d/plugin-cache
        echo 'plugin_cache_dir = "$HOME/.terraform.d/plugin-cache"' > ~/.terraformrc

    - name: Cache Terraform
      uses: actions/cache@v4
      with:
        path: |
          ~/.terraform.d/plugin-cache
          .terraform
        key: ${{ runner.os }}-terraform-${{ hashFiles('**/.terraform.lock.hcl') }}
        restore-keys: |
          ${{ runner.os }}-terraform-

    - name: Check for Configuration Drift
      working-directory: ./terraform
      run: |
        terraform init
        terraform validate
        terraform plan --refresh-only -detailed-exitcode -lock=false | tee plan_output.txt
        PLAN_EXIT_CODE=$?

        if [ $PLAN_EXIT_CODE -eq 2 ]; then
          if grep -q "~ code_sha256" plan_output.txt && \
              grep -q "~ last_modified" plan_output.txt && \
              grep -q "~ source_code_size" plan_output.txt && \
              ! grep -qE "~ (?!code_sha256|last_modified|source_code_size)" plan_output.txt; then
            echo "Only expected Lambda-related changes detected, continuing..."
            exit 0
          else
            echo "‚ùå Configuration drift detected! Please fix before deploying."
            cat plan_output.txt
            exit 1
          fi
        elif [ $PLAN_EXIT_CODE -eq 0 ]; then
          echo "No changes detected"
          exit 0
        else
          echo "Error running terraform plan"
          exit 1
        fi

    - name: Update Lambda function
      run: |
        aws lambda update-function-code \
          --function-name trading-prod-function \
          --s3-bucket trading-lambda-deployment \
          --s3-key lambda_function.zip